{"version":3,"file":"bundle.js","mappings":"mBAAO,ICAIA,EAAgB,SAAUC,EAAMC,GA6DvC,IA5DA,IAwCIC,EAAWC,EAxCXC,EAAgB,GAChBC,EAAkB,GAClBC,EAAQ,CACR,WACA,YACA,aACA,YACA,cACA,eACA,gBACA,eACA,YACA,aACA,cACA,aACA,aACA,cACA,eACA,cACA,UACA,WACA,SACA,SACA,SACA,WACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,UACA,UACA,YACA,WACA,WACA,WACA,YAGAC,EAAa,WACbL,EAAYM,KAAKC,MACjBN,EAAWO,aAAY,WACnB,IAAIC,EAAcC,KAAKC,OAAOL,KAAKC,MAAQP,GAAa,KACpDY,EAAMF,KAAKC,MAAMF,EAAc,IAC9BI,WACAC,SAAS,EAAG,KACbC,GAAON,EAAc,IAAII,WAAWC,SAAS,EAAG,KACpDE,SAASC,cAAc,eAAeC,UAAY,GAAGC,OAAOP,EAAK,KAAKO,OAAOJ,EACjF,GAAG,IACP,EACIK,EAAY,WACZC,cAAcpB,EAClB,EAMSqB,EAAI,EAAGA,EAAIvB,EAAYuB,IAAK,CACjC,IAAIC,EAAanB,EAAMM,KAAKC,MAAMD,KAAKc,SAAWpB,EAAMqB,SACxDvB,GAAiB,wDAA2DiB,OAAOG,EAAG,mCAAqCH,OAAOI,EAAY,eAAiBJ,OAAOI,EAAY,oCAClLpB,GAAmB,wDAA2DgB,OAAOG,EAAG,oCACxFlB,EAAMsB,OAAOtB,EAAMuB,QAAQJ,GAAa,EAC5C,CACA,IAAIK,EAAa,uWACbC,EAAc,sCAAwCV,OAAOS,EAAY,kDAAoDT,OAAOhB,EAAiB,8BACrJ2B,EAAY,sCAAwCX,OAAOS,EAAY,kDAAoDT,OAAOjB,EAAe,8BACrJJ,EAAKoB,UAAYY,EACjBzB,IACA0B,YAAW,WACPjC,EAAKoB,UAAYW,EACjBb,SAASC,cAAc,eAAee,iBAAiB,SAAS,WAjBhEZ,IACAJ,SAASC,cAAc,eAAeC,UAAY,QAClDb,IAiBIR,EAAcC,EAAMC,EACxB,IACA,IAAIkC,EAAejB,SAASkB,iBAAiB,wBACzCC,EAAe,KACfC,EAAoB,EACxBH,EAAaI,SAAQ,SAAUC,GAC3BA,EAAKN,iBAAiB,SAAS,SAAUO,GACrC,IAAIC,EAAcD,EAAME,cACpBC,EAAYF,EAAYG,aAAa,cACrCC,EAAexC,EAAMsC,GAEzB,GADAF,EAAYtB,UAAY,kCAAmCC,OAAOyB,EAAc,eAAiBzB,OAAOyB,EAAc,gBACjG,OAAjBT,EACAA,EAAeK,MAEd,CACD,IAAIK,EAAoBV,EAAaQ,aAAa,cAC9CG,EAAoB1C,EAAMyC,GAC9B,GAAID,EAAaG,OAAO,KAAOD,EAAkBC,OAAO,IAMpD,GAJAZ,EAAaa,oBAAoB,SAAS,WAAc,IACxDR,EAAYQ,oBAAoB,SAAS,WAAc,IACvDb,EAAe,OACfC,GAC0BrC,EAAa,EAAG,CAEtCqB,IACA,IAAI6B,EAAOjC,SAASC,cAAc,eAAeC,UAC7CgC,EAAc,4TAAwc/B,OAAO8B,EAAM,iJACvenD,EAAKoB,UAAYgC,EACClC,SAASC,cAAc,yBAC7Be,iBAAiB,SAAS,WAClCnC,EAAcC,EAAMC,EACxB,GACJ,OAEKqC,IAAsBrC,EAAa,GACxC6C,IAAiBE,GAEjB1B,IACI6B,EAAOjC,SAASC,cAAc,eAAeC,UAC7CgC,EAAc,0TAA2c/B,OAAO8B,EAAM,kJAC1enD,EAAKoB,UAAYgC,EACClC,SAASC,cAAc,yBAC7Be,iBAAiB,SAAS,WAClCnC,EAAcC,EAAMC,EACxB,KAIAgC,YAAW,WACPS,EAAYtB,UAAY,GACxBiB,EAAajB,UAAY,EAE7B,GAAG,IAEX,CACJ,GACJ,GACJ,GAAG,IACP,ECpIIpB,EAAOkB,SAASmC,eAAe,SFHN,SAAUrD,GAEnCA,EAAKoB,UADe,iyBAExB,CEEIkC,CAAgBtD,GAQpB,IAAIuD,EAAiBrC,SAASC,cAAc,gBACxCqC,EAAWtC,SAASC,cAAc,UACtC,GAAuB,OAAnBoC,EAAyB,CACzBA,EAAerB,iBAAiB,UATjB,SAAUO,GACzBA,EAAMgB,iBACN,IAAIC,EAAQxC,SAASC,cAAc,+BAA+BwC,MAClE5D,EAAcC,EAAM4D,SAASF,GACjC,IAMIH,EAAerB,iBAAiB,SAAS,WACpB,OAAbsB,IACAA,EAASK,SAA2E,KAAhE3C,SAASC,cAAc,+BAA+BwC,MAElF,IACA,IAAIG,EAAU,EACG,OAAbN,GACAA,EAAStB,iBAAiB,SAAS,WAEf,KADhB4B,EAAUF,SAAS1C,SAASC,cAAc,+BAA+BwC,QAErE5D,EAAcC,EAAM,GAEH,IAAZ8D,EACL/D,EAAcC,EAAM,IAEH,IAAZ8D,GACL/D,EAAcC,EAAM,GAE5B,GAER,C","sources":["webpack://game-card/./textWindowLevel.ts","webpack://game-card/./stLevel.ts","webpack://game-card/./game-card.ts"],"sourcesContent":["export var renderTextLevel = function (game) {\n    var textLevelHtml = \"<div class=\\\"level__container\\\">\\n        <h2 class=\\\"level__text\\\">\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438 \\u0441\\u043B\\u043E\\u0436\\u043D\\u043E\\u0441\\u0442\\u044C</h2>\\n        <form class=\\\"level__form\\\">\\n            <div class=\\\"level__value-gap\\\">\\n                <label class=\\\"level__value\\\">\\n                    <input type=\\\"radio\\\" name=\\\"level\\\" value=\\\"1\\\">\\n                    <span>1</span>\\n                </label>\\n                <label class=\\\"level__value\\\">\\n                    <input type=\\\"radio\\\" name=\\\"level\\\" value=\\\"2\\\">\\n                    <span>2</span>\\n                </label>\\n                <label class=\\\"level__value\\\">\\n                    <input type=\\\"radio\\\" name=\\\"level\\\" value=\\\"3\\\">\\n                    <span>3</span>\\n                </label>\\n            </div>\\n            <button disabled=\\\"true\\\" class=\\\"start\\\">\\u0421\\u0442\\u0430\\u0440\\u0442</button>\\n        </form>\\n    </div>\";\n    game.innerHTML = textLevelHtml;\n};\n","export var renderstLevel = function (game, cardsCount) {\n    var openCardsHtml = '';\n    var closedCardsHtml = '';\n    var cards = [\n        'туз пики',\n        'туз черви',\n        'туз крести',\n        'туз бубны',\n        'король пики',\n        'король черви',\n        'король крести',\n        'король бубны',\n        'дама пики',\n        'дама черви',\n        'дама крести',\n        'дама бубны',\n        'валет пики',\n        'валет черви',\n        'валет крести',\n        'валет бубны',\n        '10 пики',\n        '10 бубны',\n        '9 пики',\n        '7 пики',\n        '6 пики',\n        '10 черви',\n        '9 черви',\n        '8 черви',\n        '7 черви',\n        '10 черви',\n        '6 черви',\n        '9 бубны',\n        '8 бубны',\n        '7 бубны',\n        '6 бубны',\n        '10 крести',\n        '9 крести',\n        '8 крести',\n        '7 крести',\n        '6 крести',\n    ];\n    var startTime, interval;\n    var startTimer = function () {\n        startTime = Date.now();\n        interval = setInterval(function () {\n            var elapsedTime = Math.floor((Date.now() - startTime) / 1000);\n            var min = Math.floor(elapsedTime / 60)\n                .toString()\n                .padStart(2, '0');\n            var sec = (elapsedTime % 60).toString().padStart(2, '0');\n            document.querySelector('.game__time').innerHTML = \"\".concat(min, \":\").concat(sec);\n        }, 1000);\n    };\n    var stopTimer = function () {\n        clearInterval(interval);\n    };\n    var resetTimer = function () {\n        stopTimer();\n        document.querySelector('.game__time').innerHTML = '00:00';\n        startTimer();\n    };\n    for (var i = 0; i < cardsCount; i++) {\n        var randomCard = cards[Math.floor(Math.random() * cards.length)];\n        openCardsHtml += \"\\n      <div class=\\\"game-go__cards-item\\\" data-index=\\\"\".concat(i, \"\\\">\\n        <img src=\\\"./images/\").concat(randomCard, \".png\\\" alt=\\\"\").concat(randomCard, \"\\\">\\n        \\n      </div>\\n    \");\n        closedCardsHtml += \"\\n      <div class=\\\"game-go__cards-item\\\" data-index=\\\"\".concat(i, \"\\\">\\n        \\n      </div>\\n    \");\n        cards.splice(cards.indexOf(randomCard), 1);\n    }\n    var gameHeader = \"\\n      <div class=\\\"game__header\\\">\\n        <div class=\\\"game__time-box\\\">\\n          <div class=\\\"game__text-box\\\">\\n            <p class=\\\"game__text\\\">min</p>\\n            <p class=\\\"game__text\\\">sek</p>\\n          </div>\\n          <div class=\\\"game__time\\\"> </div>\\n        </div>\\n        <button class=\\\"buttonOver\\\"> \\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E </button>\\n      </div>\\n    \";\n    var closedCards = \"\\n    <div class=\\\"game-go\\\">\\n      \".concat(gameHeader, \"\\n      <div class=\\\"game-go__cards\\\">\\n        \").concat(closedCardsHtml, \"\\n      </div>\\n    </div>\");\n    var openCards = \"\\n    <div class=\\\"game-go\\\">\\n      \".concat(gameHeader, \"\\n      <div class=\\\"game-go__cards\\\">\\n        \").concat(openCardsHtml, \"\\n      </div>\\n    </div>\");\n    game.innerHTML = openCards;\n    startTimer();\n    setTimeout(function () {\n        game.innerHTML = closedCards;\n        document.querySelector('.buttonOver').addEventListener('click', function () {\n            resetTimer(); // добавляем вызов функции остановки таймера\n            renderstLevel(game, cardsCount); // вызываем функцию renderstLevel заново, чтобы начать игру сначала\n        });\n        var cardElements = document.querySelectorAll('.game-go__cards-item');\n        var previousCard = null; // переменная для хранения предыдущей открытой карты\n        var matchedCardsCount = 0; // переменная для подсчета количества уже совпавших карт\n        cardElements.forEach(function (card) {\n            card.addEventListener('click', function (event) {\n                var clickedCard = event.currentTarget;\n                var cardIndex = clickedCard.getAttribute('data-index');\n                var selectedCard = cards[cardIndex];\n                clickedCard.innerHTML = \"\\n          <img src=\\\"./images/\".concat(selectedCard, \".png\\\" alt=\\\"\").concat(selectedCard, \"\\\">\\n        \");\n                if (previousCard === null) {\n                    previousCard = clickedCard; // если это первая открытая карта, сохраняем ее в переменную\n                }\n                else {\n                    var previousCardIndex = previousCard.getAttribute('data-index');\n                    var previousCardValue = cards[previousCardIndex];\n                    if (selectedCard.charAt(0) === previousCardValue.charAt(0)) {\n                        // если первая буква или число совпала с предыдущей, то удаляем обработчик клика и увеличиваем счетчик совпавших карт\n                        previousCard.removeEventListener('click', function () { });\n                        clickedCard.removeEventListener('click', function () { });\n                        previousCard = null;\n                        matchedCardsCount++;\n                        if (matchedCardsCount === cardsCount / 2) {\n                            // если все карты совпали, то выводим сообщение о победе\n                            stopTimer();\n                            var time = document.querySelector('.game__time').innerHTML;\n                            var resultTable = \"\\n              <div class=\\\"result\\\">\\n              <div class=\\\"result-table\\\">\\n                <img src=\\\"./images/win.png\\\" alt='win'>\\n                <h2 class=\\\"result__status\\\"> \\u0412\\u044B \\u0432\\u044B\\u0438\\u0433\\u0440\\u0430\\u043B\\u0438!</h2>\\n                <p class =\\\"result__time-text\\\">\\u0417\\u0430\\u0442\\u0440\\u0430\\u0447\\u0435\\u043D\\u043D\\u043E\\u0435 \\u0432\\u0440\\u0435\\u043C\\u044F </p>\\n                <p class = \\\"result__time\\\">\".concat(time, \"</p>\\n                <button class=\\\"result__button_again\\\"> \\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E </button>\\n              </div>\\n              </div>\\n            \");\n                            game.innerHTML = resultTable;\n                            var againButton = document.querySelector('.result__button_again'); // перемещаем определение кнопки внутрь условия, чтобы она была доступна только после победы\n                            againButton.addEventListener('click', function () {\n                                renderstLevel(game, cardsCount); // вызываем функцию renderstLevel заново, чтобы начать игру сначала\n                            });\n                        }\n                    }\n                    else if (matchedCardsCount === cardsCount / 3 &&\n                        selectedCard !== previousCardValue) {\n                        // если количество уже совпавших карт равно 1/3 от общего числа и они не совпали, то выводим сообщение о проигрыше и затраченном времени\n                        stopTimer();\n                        var time = document.querySelector('.game__time').innerHTML;\n                        var resultTable = \"\\n            <div class=\\\"result\\\">\\n              <div class=\\\"result-table\\\">\\n              <img src=\\\"./images/loss.png\\\" alt='loss'>\\n                <h2 class=\\\"result__status\\\">\\u0412\\u044B \\u043F\\u0440\\u043E\\u0438\\u0433\\u0440\\u0430\\u043B\\u0438!</h2>\\n                <p class =\\\"result__time-text\\\">\\u0417\\u0430\\u0442\\u0440\\u0430\\u0447\\u0435\\u043D\\u043D\\u043E\\u0435 \\u0432\\u0440\\u0435\\u043C\\u044F </p>\\n                <p class = \\\"result__time\\\">\".concat(time, \"</p>\\n                <button class= \\\"result__button_again\\\"> \\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E </button>\\n              </div>\\n              </div>\\n            \");\n                        game.innerHTML = resultTable;\n                        var againButton = document.querySelector('.result__button_again'); // перемещаем определение кнопки внутрь условия, чтобы она была доступна только после победы\n                        againButton.addEventListener('click', function () {\n                            renderstLevel(game, cardsCount); // вызываем функцию renderstLevel заново, чтобы начать игру сначала\n                        });\n                    }\n                    else {\n                        // иначе закрываем обе карты через 1 секунду и сбрасываем предыдущую открытую карту\n                        setTimeout(function () {\n                            clickedCard.innerHTML = '';\n                            previousCard.innerHTML = '';\n                            //previousCard = null;\n                        }, 1000);\n                    }\n                }\n            });\n        });\n    }, 2000);\n};\n","import { renderTextLevel } from './textWindowLevel';\nimport { renderstLevel } from './stLevel';\nimport './style.css';\nvar game = document.getElementById('game');\nvar renderGame = function () {\n    renderTextLevel(game);\n};\nvar handleSubmit = function (event) {\n    event.preventDefault();\n    var level = document.querySelector('input[name=\"level\"]:checked').value;\n    renderstLevel(game, parseInt(level));\n};\nrenderGame();\nvar formHelloLevel = document.querySelector('.level__form');\nvar btnStart = document.querySelector('.start');\nif (formHelloLevel !== null) {\n    formHelloLevel.addEventListener('submit', handleSubmit);\n    formHelloLevel.addEventListener('input', function () {\n        if (btnStart !== null) {\n            btnStart.disabled = document.querySelector('input[name=\"level\"]:checked').value === '';\n        }\n    });\n    var level_1 = 0;\n    if (btnStart !== null) {\n        btnStart.addEventListener('click', function () {\n            level_1 = parseInt(document.querySelector('input[name=\"level\"]:checked').value);\n            if (level_1 === 1) {\n                renderstLevel(game, 6);\n            }\n            else if (level_1 === 2) {\n                renderstLevel(game, 12);\n            }\n            else if (level_1 === 3) {\n                renderstLevel(game, 16);\n            }\n        });\n    }\n}\n"],"names":["renderstLevel","game","cardsCount","startTime","interval","openCardsHtml","closedCardsHtml","cards","startTimer","Date","now","setInterval","elapsedTime","Math","floor","min","toString","padStart","sec","document","querySelector","innerHTML","concat","stopTimer","clearInterval","i","randomCard","random","length","splice","indexOf","gameHeader","closedCards","openCards","setTimeout","addEventListener","cardElements","querySelectorAll","previousCard","matchedCardsCount","forEach","card","event","clickedCard","currentTarget","cardIndex","getAttribute","selectedCard","previousCardIndex","previousCardValue","charAt","removeEventListener","time","resultTable","getElementById","renderTextLevel","formHelloLevel","btnStart","preventDefault","level","value","parseInt","disabled","level_1"],"sourceRoot":""}